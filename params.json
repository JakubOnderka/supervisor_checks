{"name":"Supervisor Health Checks","tagline":"Framework to build health checks for Supervisor-based services.","body":"# Supervisor Health Checks\r\n\r\nFramework to build health checks for Supervisor-based services.\r\n\r\nHealth check programs are supposed to run as event listeners in [Supervisor](http://supervisord.org)\r\nenvironment. Supervisor will attempt to restart monitored processes on check\r\nfailure.\r\n \r\nHere's typical configuration example:\r\n\r\n    [eventlistener:example_check]\r\n    command=python <path_to_supervisor_check_program>\r\n    stderr_logfile = /var/log/supervisor/supervisor_example_check-stderr.log\r\n    stdout_logfile = /var/log/supervisor/supervisor_example_check-stdout.log\r\n    events=TICK_60\r\n    \r\nHere's the list of check programs package provides out-of-box:\r\n    \r\n* _supervisor_http_check_: process check based on HTTP query. \r\n* _supervisor_tcp_check_: process check based on TCP connection status.\r\n* _supervisor_xmlrpc_check_: process check based on call to XML RPC server.\r\n* _supervisor_memory_check_: process check based on amount of memory consumed by process.\r\n* _supervisor_complex_check_: complex check(run multiple checks at once).\r\n\r\n\r\n## Developing Custom Check Modules\r\n\r\nWhile framework provides the good set of ready-for-use health check classes,\r\nit can be easily extended by adding application-specific custom health checks.\r\n\r\nTo implement custom check class, _check_modules.base.BaseCheck_ class must\r\nbe inherited:\r\n\r\n```python\r\n    class BaseCheck(object):\r\n        \"\"\"Base class for checks.\r\n        \"\"\"\r\n    \r\n        NAME = None\r\n    \r\n        def __call__(self, process_spec):\r\n            \"\"\"Run single check.\r\n    \r\n            :param dict process_spec: process specification dictionary as returned\r\n                   by SupervisorD API.\r\n    \r\n            :return: True is check succeeded, otherwise False. If check failed -\r\n                     monitored process will be automatically restarted.\r\n    \r\n            :rtype: bool\r\n            \"\"\"\r\n    \r\n        def _validate_config(self):\r\n            \"\"\"Method may be implemented in subclasses. Should return None or\r\n            raise InvalidCheckConfig in case if configuration is invalid.\r\n    \r\n            Here's typical example of parameter check:\r\n    \r\n              if 'url' not in self._config:\r\n                  raise errors.InvalidCheckConfig(\r\n                      'Required `url` parameter is missing in %s check config.' % (\r\n                          self.NAME,))\r\n            \"\"\"\r\n```\r\n\r\nHere's the example of adding custom check:\r\n\r\n```python\r\n    from supervisor_checks.check_modules import base\r\n    from supervisor_checks import check_runner\r\n\r\n    class ExampleCheck(base.BaseCheck):\r\n\r\n        NAME = 'example'\r\n\r\n        def __call__(self, process_spec):\r\n\r\n            # Always return True\r\n            return True\r\n\r\n    if __name__ == '__main__':\r\n    \r\n        check_runner.CheckRunner(\r\n            'example_check', 'some_process_group', [(ExampleCheck, {})]).run()\r\n```\r\n    \r\n## Out-of-box checks\r\n\r\n### HTTP Check\r\n\r\nProcess check based on HTTP query.\r\n\r\n#### CLI\r\n\r\n    $ /usr/local/bin/supervisor_http_check -h\r\n    usage: supervisor_http_check [-h] -n CHECK_NAME -g PROCESS_GROUP -u URL -p\r\n                                 PORT [-t TIMEOUT] [-r NUM_RETRIES]\r\n    \r\n    Run HTTP check program.\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -n CHECK_NAME, --check-name CHECK_NAME\r\n                            Health check name.\r\n      -g PROCESS_GROUP, --process-group PROCESS_GROUP\r\n                            Supervisor process group name.\r\n      -u URL, --url URL     HTTP check url\r\n      -p PORT, --port PORT  HTTP port to query. Can be integer or regular\r\n                            expression which will be used to extract port from a\r\n                            process name.\r\n      -t TIMEOUT, --timeout TIMEOUT\r\n                            Connection timeout. Default: 15\r\n      -r NUM_RETRIES, --num-retries NUM_RETRIES\r\n                            Connection retries. Default: 2\r\n                            \r\n#### Configuration Examples\r\n\r\nQuery process running on port 8080 using URL _/ping_:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_http_check -g example_service -n example_check -u /ping -t 30 -r 3 -p 8080\r\n    events=TICK_60\r\n    \r\nQuery process group using URL /ping. Each process is listening on it's own port.\r\nEach process name is formed as _some-process-name\\_port_ so particular port number can\r\nbe extracted using regular expression:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_http_check -g example_service -n example_check -u /ping -t 30 -r 3 -p \".+_(\\\\d+)\"    \r\n    events=TICK_60\r\n\r\n\r\n### TCP Check\r\n\r\nProcess check based on TCP connection status.\r\n\r\n#### CLI\r\n\r\n    $ /usr/local/bin/supervisor_tcp_check -h\r\n    usage: supervisor_tcp_check [-h] -n CHECK_NAME -g PROCESS_GROUP -p PORT\r\n                                [-t TIMEOUT] [-r NUM_RETRIES]\r\n    \r\n    Run TCP check program.\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -n CHECK_NAME, --check-name CHECK_NAME\r\n                            Check name.\r\n      -g PROCESS_GROUP, --process-group PROCESS_GROUP\r\n                            Supervisor process group name.\r\n      -p PORT, --port PORT  TCP port to query. Can be integer or regular\r\n                            expression which will be used to extract port from a\r\n                            process name.\r\n      -t TIMEOUT, --timeout TIMEOUT\r\n                            Connection timeout. Default: 15\r\n      -r NUM_RETRIES, --num-retries NUM_RETRIES\r\n                            Connection retries. Default: 2\r\n                            \r\n#### Configuration Examples\r\n\r\nConnect to process running on port 8080:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_tcp_check -g example_service -n example_check -t 30 -r 3 -p 8080\r\n    events=TICK_60\r\n    \r\nQuery process group when each process is listening on it's own port. \r\nEach process name is formed as _some-process-name\\_port_ so particular port number can\r\nbe extracted using regular expression:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_tcp_check -g example_service -n example_check -t 30 -r 3 -p \".+_(\\\\d+)\"    \r\n    events=TICK_60                            \r\n\r\n\r\n### XMLRPC Check\r\n\r\nProcess check based on call to XML RPC server.\r\n\r\n#### CLI\r\n\r\n    $ /usr/local/bin/supervisor_xmlrpc_check -h\r\n    usage: supervisor_xmlrpc_check [-h] -n CHECK_NAME -g PROCESS_GROUP [-u URL]\r\n                                   [-s SOCK_PATH] [-S SOCK_DIR] [-p PORT]\r\n                                   [-r NUM_RETRIES]\r\n    \r\n    Run XML RPC check program.\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -n CHECK_NAME, --check-name CHECK_NAME\r\n                            Health check name.\r\n      -g PROCESS_GROUP, --process-group PROCESS_GROUP\r\n                            Supervisor process group name.\r\n      -u URL, --url URL     XML RPC check url\r\n      -s SOCK_PATH, --socket-path SOCK_PATH\r\n                            Full path to XML RPC server local socket\r\n      -S SOCK_DIR, --socket-dir SOCK_DIR\r\n                            Path to XML RPC server socket directory. Socket name\r\n                            will be constructed using process name:\r\n                            <process_name>.sock.\r\n      -m METHOD, --method METHOD\r\n                            XML RPC method name. Default is status                            \r\n      -p PORT, --port PORT  Port to query. Can be integer or regular\r\n                            expression which will be used to extract port from a\r\n                            process name.\r\n      -r NUM_RETRIES, --num-retries NUM_RETRIES\r\n                            Connection retries. Default: 2\r\n\r\n#### Configuration Examples\r\n\r\nCall to process' XML RPC server listening on port 8080, URL /status, RPC method get_status:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_xmlrpc_check -g example_service -n example_check -r 3 -p 8080 -u /status -m get_status\r\n    events=TICK_60\r\n    \r\nCall to process' XML RPC server listening on UNIX socket:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_xmlrpc_check -g example_service -n example_check -r 3 -s /var/run/example.sock -m get_status\r\n    events=TICK_60\r\n    \r\nCall to process group XML RPC servers, listening on different UNIX socket. In such\r\ncase socket directory must be specified, process socket name will be formed as <process_name>.sock:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_xmlrpc_check -g example_service -n example_check -r 3 -S /var/run/ -m get_status\r\n    events=TICK_60    \r\n\r\n### Memory Check\r\n\r\nProcess check based on amount of memory consumed by process.\r\n\r\n#### CLI\r\n\r\n    $ /usr/local/bin/supervisor_memory_check -h\r\n    usage: supervisor_memory_check [-h] -n CHECK_NAME -g PROCESS_GROUP -m MAX_RSS\r\n                                   [-c CUMULATIVE]\r\n    \r\n    Run memory check program.\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -n CHECK_NAME, --check-name CHECK_NAME\r\n                            Health check name.\r\n      -g PROCESS_GROUP, --process-group PROCESS_GROUP\r\n                            Supervisor process group name.\r\n      -m MAX_RSS, --msx-rss MAX_RSS\r\n                            Maximum memory allowed to use by process, KB.\r\n      -c CUMULATIVE, --cumulative CUMULATIVE\r\n                            Recursively calculate memory used by all process\r\n                            children.\r\n\r\n#### Configuration Examples\r\n\r\nRestart process if the total amount of memory consumed by process and all its\r\nchildren is greater than 100M:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_memory_check -n example_check -m 102400 -c -g example_service\r\n    events=TICK_60\r\n\r\n\r\n### Complex Check\r\n\r\nComplex check(run multiple checks at once).\r\n\r\n#### CLI\r\n\r\n    $ /usr/local/bin/supervisor_complex_check -h\r\n    usage: supervisor_complex_check [-h] -n CHECK_NAME -g PROCESS_GROUP -c\r\n                                    CHECK_CONFIG\r\n    \r\n    Run SupervisorD check program.\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -n CHECK_NAME, --check-name CHECK_NAME\r\n                            Health check name.\r\n      -g PROCESS_GROUP, --process-group PROCESS_GROUP\r\n                            Supervisor process group name.\r\n      -c CHECK_CONFIG, --check-config CHECK_CONFIG\r\n                            Check config in JSON format\r\n\r\n#### Example configuration\r\n\r\nHere's example configuration using memory and http checks:\r\n\r\n    [eventlistener:example_check]\r\n    command=/usr/local/bin/supervisor_complex_check -n example_check -g example_service -c '{\"memory\":{\"cumulative\":true,\"max_rss\":4194304},\"http\":{\"timeout\":15,\"port\":8090,\"url\":\"\\/ping\",\"num_retries\":3}}'\r\n    events=TICK_60\r\n\r\n\r\n## Acknowledgement\r\n\r\nThis is inspired by [Superlance](https://superlance.readthedocs.org/en/latest/) plugin package.\r\n\r\nThough, while [Superlance](https://superlance.readthedocs.org/en/latest/) is basically the set\r\nof feature-rich health check programs, `supervisor_checks` package is mostly focused on providing\r\nthe framework to easily implement application-specific health checks of any complexity.\r\n\r\n## Bug reports\r\n\r\nPlease file here: <https://github.com/vovanec/supervisor_checks/issues>\r\n\r\nOr contact me directly: <vovanec@gmail.com> \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}